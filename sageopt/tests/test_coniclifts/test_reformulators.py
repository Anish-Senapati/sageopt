"""
   Copyright 2019 Riley John Murray

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""
import unittest
import numpy as np
from scipy.sparse import csc_matrix
from sageopt.coniclifts.reformulators import prep_sep_dis_diag_cone_cons
from sageopt.coniclifts.cones import Cone


def col_mappings_to_lists(sep_K):
    for co in sep_K:
        if 'col mapping' in co.annotations:
            col_map = co.annotations['col mapping']
            if not isinstance(col_map, np.ndarray):
                assert False
            if not col_map.ndim == 1:
                assert False
            co.annotations['col mapping'] = col_map.tolist()
    pass


class TestReformulators(unittest.TestCase):

    def test_separate_disjoint_diag_1(self):
        """
        A conic system with primarily disjoint diagonal constraints.

        The data in this example was originally generated by ...

            x = Variable(shape=(2,), name='x')
            y = Variable(shape=(2,), name='y')
            re = relent(2 * x, np.exp(1) * y)
            con = [re <= 10, 3 <= x, x <= 5]
            A, b, K, _ = compile_constrained_system(con)
        """
        # noinspection SpellCheckingInspection
        eulr = np.exp(1)
        A = csc_matrix(np.array([[0., 0., 0., 0., -1., -1.],
                                 [1., 0., 0., 0., 0., 0.],
                                 [0., 1., 0., 0., 0., 0.],
                                 [-1., 0., 0., 0., 0., 0.],
                                 [0., -1., 0., 0., 0., 0.],
                                 [0., 0., 0., 0., -1., 0.],
                                 [0., 0., eulr, 0., 0., 0.],
                                 [2., 0., 0., 0., 0., 0.],
                                 [0., 0., 0., 0., 0., -1.],
                                 [0., 0., 0., eulr, 0., 0.],
                                 [0., 2., 0., 0., 0., 0.]]))
        b = np.array([10., -3., -3., 5., 5., 0., 0., 0., 0., 0., 0.])
        K = [Cone('+', 1), Cone('+', 2), Cone('+', 2), Cone('e', 3),  Cone('e', 3)]
        selector, K0, sep_K0, scale, trans = prep_sep_dis_diag_cone_cons(A, b, K, dont_sep={'0', '+'})
        col_mappings_to_lists(sep_K0)

        expect_selector = np.array([True, True, True, True, True,
                                    False, False, False,
                                    False, False, False])
        expect_scaling = np.array([0.5, 0.5, np.exp(-1), np.exp(-1), -1, -1])
        expect_translates = np.array([0, 0, 0, 0, 0, 0])
        expect_sep_K0 = [Cone('e', 3, {'col mapping': [4, 2, 0]}), Cone('e', 3, {'col mapping': [5, 3, 1]})]
        expect_K0 = [Cone('+', 1), Cone('+', 2), Cone('+', 2)]

        assert np.all(expect_selector == selector)
        assert np.all(expect_scaling == scale)
        assert np.all(expect_translates == trans)
        assert expect_K0 == K0
        assert expect_sep_K0 == sep_K0

    def test_separate_disjoint_diag_2(self):
        """
        A conic system with no disjoint diagonal constraints.

        The data for this system was originally generated by ...

            x = Variable(shape=(2,), name='x')
            y = Variable(shape=(2,), name='y')
            re = relent(2 * x[0] + x[1], y[0] + 3 * y[1])
            con = [re <= 10, 3 <= x, x <= 5]
            A, b, K, _ = compile_constrained_system(con)
        """

        A = csc_matrix(np.array([[0., 0., 0., 0., -1.],
                                 [1., 0., 0., 0., 0.],
                                 [0., 1., 0., 0., 0.],
                                 [-1., 0., 0., 0., 0.],
                                 [0., -1., 0., 0., 0.],
                                 [0., 0., 0., 0., -1.],
                                 [0., 0., 1., 3., 0.],
                                 [2., 1., 0., 0., 0.]]))
        b = np.array([10., -3., -3., 5., 5., 0., 0., 0.])
        K = [Cone('+', 1), Cone('+', 2), Cone('+', 2), Cone('e', 3)]

        selector, K0, sep_K0, scale, trans = prep_sep_dis_diag_cone_cons(A, b, K, dont_sep={'+', '0'})
        col_mappings_to_lists(sep_K0)
        expect_selector = np.ones(shape=(A.shape[0],), dtype=bool)
        expect_scaling = np.ones(shape=(A.shape[1],))
        expect_translates = np.zeros(shape=(A.shape[1],))
        expect_sep_K0 = []
        expect_K0 = K

        assert np.all(expect_selector == selector)
        assert np.all(expect_scaling == scale)
        assert np.all(expect_translates == trans)
        assert expect_K0 == K0
        assert expect_sep_K0 == sep_K0

    def test_separate_disjoint_diag_3(self):
        """
        A conic system with some nonlinear constraints that are disjoint-diagonal, and some that are not.

        The data for this system was originally generated by ...

            x = Variable(shape=(2,), name='x')
            y = Variable(shape=(2,), name='y')
            re = relent(x, [y[0], x[1] + 3 * y[1]])
            con = [re <= 10, 3 <= x, x <= 5]
            A, b, K, _ = compile_constrained_system(con)
        """
        A = csc_matrix(np.array([[0., 0., 0., 0., -1., -1.],
                                 [1., 0., 0., 0., 0., 0.],
                                 [0., 1., 0., 0., 0., 0.],
                                 [-1., 0., 0., 0., 0., 0.],
                                 [0., -1., 0., 0., 0., 0.],
                                 [0., 0., 0., 0., -1., 0.],
                                 [0., 0., 1., 0., 0., 0.],
                                 [1., 0., 0., 0., 0., 0.],
                                 [0., 0., 0., 0., 0., -1.],
                                 [0., 1., 0., 3., 0., 0.],
                                 [0., 1., 0., 0., 0., 0.]]))
        b = np.array([10., -3., -3., 5., 5., 0., 0., 0., 0., 0., 0.])
        K = [Cone('+', 1), Cone('+', 2), Cone('+', 2), Cone('e', 3), Cone('e', 3)]

        selector, K0, sep_K0, scale, trans = prep_sep_dis_diag_cone_cons(A, b, K, dont_sep={'+', '0'})
        col_mappings_to_lists(sep_K0)
        expect_selector = np.ones(shape=(A.shape[0],), dtype=bool)
        expect_selector[5:8] = False
        expect_K0 = [Cone('+', 1), Cone('+', 2), Cone('+', 2), Cone('e', 3)]
        expect_sep_K0 = [Cone('e', 3, {'col mapping': [4, 2, 0]})]
        expect_scaling = np.array([1, 1, 1, 1, -1, 1])
        expect_translates = np.zeros(shape=(A.shape[1],))

        assert np.all(expect_selector == selector)
        assert np.all(expect_scaling == scale)
        assert np.all(expect_translates == trans)
        assert expect_K0 == K0
        assert expect_sep_K0 == sep_K0


if __name__ == '__main__':
    unittest.main()

